mapping records(string:array(string)) = ([
    "Star Wars Trilogy" : ({
        "Fox Fanfare",
        "Main Title",
        "Princess Leia's Theme",
        "Here They Come",
        "The Asteroid Field",
        "Yoda's Theme",
        "The Imperial March",
        "Parade of th Ewoks",
        "Luke and Leia",
        "Fight with Tie Fighters",
        "Jabba the Hut",
        "Darth Vader's Death",
        "The Forest Battle",
        "Finale",
    })
]);

void list_records()
{
    int i;
    array(string) record_names=sort(indices(records));

    write("Records:\n");
    for(i=0;i<sizeof(record_names);i++)
        write(sprintf("%3d: %s\n", i+1, record_names[i]));
}

void show_record(int num)
{
    int i;
    array(string) record_names=sort(indices(records));
    string name=record_names[num-1];
    string songs=records[name];

    write(sprintf("Record %d, %s\n",num,name));
    for(i=0;i<sizeof(songs);i++)
        write(sprintf("%3d: %s\n", i+1, songs[i]));
}

void add_record()
{
    string record_name=readline("Record name: ");
    records[record_name]=({});
    write("Input song names, one per line. End with '.' on its own line.\n");
    while(1)
    {
        string song;
        song=readline(sprintf("Song %2d: ",sizeof(records[record_name])+1));
        if(song==".") return;
        records[record_name]+=({song});
    }
}

void save(string file_name)
{
    string name, song;
    object o;
    o=Stdio.File();

    if(!o->open(file_name,"wct"))
    {
        write("Failed to open file.\n");
        return;
    }

    foreach(indices(records),name)
    {
        o->write("Record: "+name+"\n");
        foreach(records[name],song)
            o->write("Song: "+song+"\n");
    }

    o->close();
}

void load(string file_name)
{
    object o;
    string name="ERROR";
    string file_contents,line;

    o=Stdio.File();
    if(!o->open(file_name,"r"))
    {
        write("Failed to open file.\n");
        return;
    }

    file_contents=o->read();
    o->close();

    records=([]);

    foreach(file_contents/"\n",line)
    {
        string cmd, arg;
        if(sscanf(line,"%s: %s",cmd,arg))
        {
            switch(lower_case(cmd))
            {
                case "record":
                    name=arg;
                    records[name]=({});
                    break;

                case "song":
                    records[name]+=({arg});
                    break;
            }
        }
    }
}

void delete_record(int num)
{
    array(string) record_names=sort(indices(records));
    string name=record_names[num-1];

    m_delete(records,name);
}

void find_song(string title)
{
    string name, song;
    int hits;

    title=lower_case(title);

    foreach(indices(records),name)
    {
        foreach(records[name],song)
        {
            if(search(lower_case(song), title) != -1)
            {
                write(name+"; "+song+"\n");
                hits++;
            }
        }
    }

    if(!hits) write("Not found.\n");
}

int main(int argc, array(string) argv)
{
    string cmd;
    while(cmd=readline("Command: "))
    {
        string args;
        sscanf(cmd,"%s %s",cmd,args);

        switch(cmd)
        {
            case "list":
                if((int)args)
                {
                    show_record((int)args);
                }else{
                    list_records();
                }
                break;

            case "quit":
             exit(0);

            case "add":
                add_record();
                break;

            case "save":
                save(args);
                break;

            case "load":
                load(args);
                break;

            case "delete":
                delete_record((int)args);
                break;

            case "search":
                find_song(args);
                break;
        }
    }
}
